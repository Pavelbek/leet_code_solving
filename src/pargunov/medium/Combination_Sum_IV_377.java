package pargunov.medium;

public class Combination_Sum_IV_377 {
    // videos which helped https://youtu.be/VlXhHl4fIGk?si=raIyb-beEDlNeEwJ  https://youtu.be/uRHHc6hunls?si=hSQcKAjc0kFcMeQA
    // base case это когда мы можем попасть в 0 т.е. число отняли от самого себя и такая комбинация возможна только одна
    // т к мы идем поочередно от 1 до target то само себя число встретим по любому и получим одну комбинацию
    // так же нас не интересует когда мы берем target в роли него у нас выступает i который меньше числа из массива т к мы получим отрицательное чилсо и к нему мы не сможем прийти
    // и таким образом если у нас цель i = 2 например, мы сначала считаем можем ли получить для 1, берем по очереди числа из массива
    // если будет 1 мы придем к 0 и получим 1 вариант
    // далее считаем для слкедующего таргет 2 берем из массива 1 делаем 2 - 1 получаем 1й индекс и смотрим суколько вариантов туда прийти
    // если такие варианты есть то они нам тоже подходят плюс мы знаем что всегда есть +1 вариант это от числа отнять само себя
    // это похоже как в two sum 3 - 2 = 1 3 - 1 = 2 3 - 3 = 0 и вот складываем все варианты в какие мы можем прийти
    private static int combinationSum4(int[] nums, int target) {
        var dp = new int[target + 1];
        dp[0] = 1;

        for(int i = 1; i <= target; i++) {
            for(int num : nums) {
                if(num <= i) dp[i] += dp[i - num];
            }
        }

        return dp[target];
    }
}
